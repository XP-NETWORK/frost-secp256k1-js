/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export class ExternalObject<T> {
  readonly '': {
    readonly '': unique symbol
    [K: symbol]: T
  }
}
export interface ParticipantWrapper {
  index: number
  commitments: Array<Buffer>
  posR: Buffer
  posS: Buffer
}
export interface PublicKeyWrapper {
  index: number
  share: Buffer
}
export interface SecretShareWrapper {
  index: number
  polynomialEvaluation: Buffer
}
export interface ParticipateRes {
  participant: ParticipantWrapper
  coefficientsHandle: number
}
export interface ShareRes {
  theirSecretShares: Array<SecretShareWrapper>
  stateHandle: number
}
export interface SecretKeyWrapper {
  index: number
  key: Buffer
}
export interface DeriveRes {
  sk: SecretKeyWrapper
  pubk: PublicKeyWrapper
  gk: Buffer
}
export interface DualRistrettoWrap {
  first: Buffer
  second: Buffer
}
export interface PubCommitmentShareListWrapper {
  participantIndex: number
  commitment: DualRistrettoWrap
}
export interface GenCommitmentShareRes {
  publicCommShare: PubCommitmentShareListWrapper
  secretCommShareHandle: number
}
export interface SignerWrapper {
  participantIndex: number
  publishedCommitmentShare: DualRistrettoWrap
}
export interface GenAggregatorRes {
  aggregatorHandle: number
  signers: Array<SignerWrapper>
}
export interface PartialThresholdSigWrapper {
  index: number
  z: Buffer
}
export function participate(uuid: number, numSig: number, threshold: number): ParticipateRes
export function generateTheirSharesAndVerifyParticipants(me: ParticipantWrapper, coefficientsHandle: number, participants: Array<ParticipantWrapper>, numSig: number, threshold: number): ShareRes
export function derivePubkAndGroupKey(stateHandle: number, me: ParticipantWrapper, mySecretShares: Array<SecretShareWrapper>): DeriveRes
export function genCommitmentShareLists(uuid: number): GenCommitmentShareRes
export function getAggregatorSigners(threshold: number, numSig: number, groupKey: Buffer, context: Buffer, message: Buffer, commitments: Array<DualRistrettoWrap>, publicKeys: Array<PublicKeyWrapper>): GenAggregatorRes
export function signPartial(secretKey: SecretKeyWrapper, groupKey: Buffer, context: Buffer, message: Buffer, secretCommShareHandle: number, signers: Array<SignerWrapper>): PartialThresholdSigWrapper
export function aggregateSignatures(aggreatorHandle: number, signatures: Array<PartialThresholdSigWrapper>): Buffer
export function validateSignature(groupKey: Buffer, signature: Buffer, context: Buffer, message: Buffer): void
